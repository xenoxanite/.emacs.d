#+TITLE: Xenoxanite's Emacs Config
#+AUTHOR: Samiul Basir Fahim

* Introduction
This is my emacs configuration. Some people may ask why I'm writing it under Org mode ?
/its Organized/.

*Author*: [[https://facebook.com/samiulbasirfahim][Samiul Basir Fahim]]
*Created*: 2024-07-11
*License*: [[./LICENSE][GNU General Public License (GPL)]]

* Installation
You can use my emacs config.
- Backup your current emacs config
- =git clone https://github.com/xenoxanite/.emacs.d.git ~/.emacs.d=
- Open emacs

* Configuration
** Disable scrollbar, toolbar, menubar, tooltips, cursor-blinking
#+begin_src elisp
    (scroll-bar-mode -1)        
    (tool-bar-mode -1)          
    (tooltip-mode -1)           
    (menu-bar-mode -1)            
    (blink-cursor-mode 0) 
#+end_src

** Make emacs default behaviour better.
#+begin_src elisp
    (set-fringe-mode 20)     
    (delete-selection-mode 1)
    (electric-pair-mode 1) 
    (global-visual-line-mode t)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq make-backup-files nil)
    (setq org-edit-src-content-indentation 4)
    (setq-default tab-width 4)
    (add-hook 'prog-mode-hook (lambda () (hs-minor-mode t)))
    (setq inhibit-startup-message t)
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Enable relative line number 
#+begin_src elisp
    (setq display-line-numbers-type 'relative) 
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Enable custom ui font
#+begin_src elisp
    (add-to-list 'default-frame-alist
                 '(font . "JetBrains Mono Nerd Font-16"))
#+end_src

** Add keybind for change text scale
#+begin_src elisp
    (global-set-key (kbd "C-=") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Add keybind for escape key
#+begin_src elisp
    (global-set-key [escape] 'keyboard-escape-quit)
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src 

** Initialize package manager
#+begin_src elisp
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
     (package-refresh-contents))
#+end_src

** Initialize use-package on non-Linux platforms
#+begin_src elisp
    (unless (package-installed-p 'use-package)
       (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src

** Install command log mode
#+begin_src elisp
    (use-package command-log-mode)
#+end_src

** Install and set-up swiper and ivy
#+begin_src elisp
    (use-package swiper)
    (use-package ivy
      :diminish
      :bind (("C-S-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)	
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))
#+end_src

** Install and set-up counsel
#+begin_src elisp
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Install and set-up counsel-projectile
#+begin_src elisp
    (use-package counsel-projectile
          :config (counsel-projectile-mode))
#+end_src 

** Add better font and icon support
#+begin_src elisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

    (use-package ivy-rich ;; This gets us descriptions in M-x.
      :init (ivy-rich-mode 1))

    (use-package nerd-icons-ivy-rich ;; Adds icons to M-x.
      :init (nerd-icons-ivy-rich-mode 1))

    (use-package all-the-icons)
#+end_src

** Install diminsh and rainbox delimiters
#+begin_src elisp
    (use-package diminish)
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Install & Initialize Evil mode 
#+begin_src elisp
    (use-package evil
      :init ;; Tweak evil's configuration before loading it
      (setq evil-want-keybinding nil) ;; Disable evil bindings in other modes (It's not consistent and not good)
      (setq evil-want-C-u-scroll t) ;; Set  C-u to scrool up
      (setq evil-want-C-i-jump nil) ;; Disables C-i jump
      (setq evil-undo-system 'undo-redo) ;; C-r to redo
      (setq org-return-follows-link  t) ;; Sets RETURN key in org-mode to follow links
      (evil-mode)
      :config
      (evil-set-initial-state 'eat-mode 'insert)) ;; Set initial state in eat terminal to insert mode
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer corfu))
      (evil-collection-init))
    ;; Unmap keys in 'evil-maps. If not done, (setq org-return-follows-link t) will not work
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

** Install & Bind key using general 
#+begin_src elisp
    (use-package general
      :config
      (general-evil-setup)
      ;; set up 'SPC' as the global leader key
      (general-create-definer start/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC" ;; Set leader
        :global-prefix "C-SPC") ;; Access leader in insert mode
#+end_src

#+begin_src elisp
      (start/leader-keys
        "." '(find-file :wk "Find file")
        "s" '(save-buffer :wk "save buffer")
        "SPC" '(counsel-M-x :wk "Counsel M-x")
        "TAB" '(comment-line :wk "Comment lines")
        "p" '(projectile-command-map :wk "Projectile command map"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "f" '(:ignore t :wk "Find")
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f r" '(counsel-recentf :wk "Recent files"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "b" '(:ignore t :wk "Buffer Bookmarks")
        "b b" '(counsel-switch-buffer :wk "Switch buffer")
        "b k" '(kill-this-buffer :wk "Kill this buffer")
        "b i" '(counsel-ibuffer :wk "Ibuffer")
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b j" '(bookmark-jump :wk "Bookmark jump"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "w" '(:ignore t :wk "Windows")
        ;; Window splits
        "w c" '(evil-window-delete :wk "Close window")
        "w n" '(split-window-right :wk "New window")
        "w s" '(evil-window-split :wk "Horizontal split window")
        "w v" '(evil-window-vsplit :wk "Vertical split window")
        ;; Window motions
        "w h" '(evil-window-left :wk "Window left")
        "w j" '(evil-window-down :wk "Window down")
        "w k" '(evil-window-up :wk "Window up")
        "w l" '(evil-window-right :wk "Window right")
        "w w" '(evil-window-next :wk "Goto next window")
        ;; Move Windows
        "w H" '(buf-move-left :wk "Buffer move left")
        "w J" '(buf-move-down :wk "Buffer move down")
        "w K" '(buf-move-up :wk "Buffer move up")
        "w L" '(buf-move-right :wk "Buffer move right"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "d" '(:ignore t :wk "Dired")
        "d f" '(counsel-find-file :wk "Open dired")
        "d j" '(counsel-dired-jump :wk "Dired jump to current"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands
        "h r" '((lambda () (interactive)
                  (load-file "~/.emacs.d/init.el"))
                :wk "Reload emacs config"))

#+end_src

#+begin_src elisp
      (start/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t w" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
        "t f" '(treemacs :wk "Treemacs toggle")
        "t t" '(treemacs-select-window :wk "Treemacs toggle focus")
        "t v" '(vterm-toggle :wk "Vterm toggle")
        "t o" '(counsel-load-theme :wk "Select theme")
        "t h" '(treemacs-toggle-show-dotfiles :wk "Treemacs toggle hidden file")))
#+end_src

** Install themes
#+begin_src elisp
    (use-package ewal
      :init (setq ewal-use-built-in-always-p nil
                  ewal-use-built-in-on-failure-p t
                  ewal-built-in-palette "sexy-material"))

    (use-package ewal-doom-themes)
    (use-package ef-themes)
#+end_src

** Remeber last theme
#+begin_src elisp    
    (use-package remember-last-theme
      :ensure t
      :config (remember-last-theme-enable)
    )
#+end_src

** Install Doom Modeline
#+begin_src elisp
    (use-package doom-modeline
      :init
      (setq doom-modeline-height 40)
      (setq doom-modeline-buffer-encoding nil)
      (doom-modeline-mode))
#+end_src

** Install & set-up which key 
#+begin_src elisp
    (use-package which-key
      :init
        (which-key-mode 1)
      :diminish
      :config
      (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order
          which-key-allow-imprecise-window-fit nil
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " → " 
          )
    )
#+end_src

** Install & set-up Treemacs
#+begin_src elisp
    (use-package treemacs
      :ensure t
      :defer t
      :bind
      (("C-c t" . treemacs))
      :config
      (setq treemacs-width 30)
      (setq treemacs-toggle-show-dotfiles nil)
      (setq-local mode-line-format nil))
#+end_src

** Install & set-up Highlight indented line
#+begin_src elisp
    (use-package highlight-indent-guides
      :ensure t
      :defer t
      :hook (prog-mode . highlight-indent-guides-mode)
      :config
      (setq highlight-indent-guides-method 'character)
      (setq highlight-indent-guides-character ?\|)
      (setq highlight-indent-guides-responsive 'top))
#+end_src

** Better Org mode support
#+begin_src elisp
    (use-package org
      :config
      (setq org-ellipsis "..."
            org-hide-emphasis-markers t
            org-agenda-files (append
                              (file-expand-wildcards "~/notes/*.org")))
      :hook (org-mode . org-indent-mode))

    (use-package org-bullets
      :hook (org-mode . org-bullets-mode))

    (defun efs/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Hide modeline on special cases
#+begin_src elisp
    (use-package hide-mode-line
      :ensure t
      :defer
      :hook (;; (eshell-mode . hide-mode-line-mode)
             (vterm-mode . hide-mode-line-mode)
             (occur-mode . hide-mode-line-mode)
             (treemacs-mode . hide-mode-line-mode)))

    (setq warning-suppress-log-types '(warning-suppress-types (unlock-file)))
#+end_src

** 