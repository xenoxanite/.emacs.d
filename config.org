#+TITLE: Xenoxanite's Emacs Config
#+AUTHOR: Samiul Basir Fahim

* Introduction
This is my emacs configuration. Some people may ask why I'm writing it under Org mode ?
/its Organized/.

*Author*: [[https://facebook.com/samiulbasirfahim][Samiul Basir Fahim]]
*Created*: 2024-07-11
*License*: [[./LICENSE][GNU General Public License (GPL)]]

* Installation
You can use my emacs config.
- Backup your current emacs config
- =git clone https://github.com/xenoxanite/.emacs.d.git ~/.emacs.d=
- Open emacs

* Configuration
** Disable scrollbar, toolbar, menubar, tooltips, cursor-blinking
#+begin_src elisp
    (scroll-bar-mode -1)        
    (tool-bar-mode -1)          
    (tooltip-mode -1)           
    (menu-bar-mode -1)            
    (blink-cursor-mode 0) 
#+end_src

** Make emacs default behaviour better.
#+begin_src elisp
    (set-fringe-mode 20)     
    (delete-selection-mode 1)
    (electric-pair-mode 1) 
    (global-visual-line-mode t)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq make-backup-files nil)
    (setq org-edit-src-content-indentation 4)
    (setq-default tab-width 4)
    (add-hook 'prog-mode-hook (lambda () (hs-minor-mode t)))
    (setq inhibit-startup-message t)
    (setq gc-cons-threshold (* 50 1000 1000))
    (global-auto-revert-mode t) 
    (setq mouse-wheel-progressive-speed nil)
    (setq scroll-conservatively 10)
    (setq scroll-margin 8)
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)
#+end_src

** Enable relative line number 
#+begin_src elisp
    (setq display-line-numbers-type 'relative) 
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Enable custom ui font
#+begin_src elisp
    (add-to-list 'default-frame-alist
                 '(font . "JetBrains Mono Nerd Font-16"))
    
    (set-face-attribute 'default nil :height 160)
    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 160)
    (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 160)
    (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 160)
#+end_src

** Add keybind for change text scale
#+begin_src elisp
    (global-set-key (kbd "C-=") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Add keybind for escape key
#+begin_src elisp
    (global-set-key [escape] 'keyboard-escape-quit)
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src 

** Initialize package manager
#+begin_src elisp
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
     (package-refresh-contents))
#+end_src

** Initialize use-package on non-Linux platforms
#+begin_src elisp
    (unless (package-installed-p 'use-package)
       (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src

** Install command log mode
#+begin_src elisp
    (use-package command-log-mode)
#+end_src

** Install and set-up swiper and ivy
#+begin_src elisp
    (use-package swiper)
    (use-package ivy
      :diminish
      :bind (("C-S-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)	
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))
#+end_src

** Install and set-up counsel
#+begin_src elisp
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Install and set-up counsel-projectile
#+begin_src elisp
    (use-package counsel-projectile
          :config (counsel-projectile-mode))
#+end_src 

** Add better font and icon support
#+begin_src elisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

    (use-package ivy-rich ;; This gets us descriptions in M-x.
      :init (ivy-rich-mode 1))

    (use-package nerd-icons-ivy-rich ;; Adds icons to M-x.
      :init (nerd-icons-ivy-rich-mode 1))

    (use-package all-the-icons)
#+end_src

** Install diminsh and rainbox delimiters
#+begin_src elisp
    (use-package diminish)
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Install & Initialize Evil mode 
#+begin_src elisp
    ;;; UNDO
    ;; Vim style undo not needed for emacs 28
    (use-package undo-fu)

    ;;; Vim Bindings
    (use-package evil
      :demand t
      :bind (("<escape>" . keyboard-escape-quit))
      :init
      ;; allows for using cgn
      ;; (setq evil-search-module 'evil-search)
      (setq evil-want-keybinding nil)
      ;; no vim insert bindings
      (setq evil-undo-system 'undo-fu)
      :config
      (evil-mode 1))

    ;;; Vim Bindings Everywhere else
    (use-package evil-collection
      :after evil
      :config
      (setq evil-want-integration t)
      (evil-collection-init))
        ;; Unmap keys in 'evil-maps. If not done, (setq org-return-follows-link t) will not work
    (with-eval-after-load 'evil-maps
        (define-key evil-motion-state-map (kbd "SPC") nil)
        (define-key evil-motion-state-map (kbd "RET") nil)
        (define-key evil-motion-state-map (kbd "TAB") nil))

    (setq evil-default-state 'normal)

#+end_src

** Install & Bind key using general 
#+begin_src elisp
    (use-package general
      :config
      (general-evil-setup)
      ;; set up 'SPC' as the global leader key
      (general-create-definer start/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC" ;; Set leader
        :global-prefix "C-SPC") ;; Access leader in insert mode
#+end_src

#+begin_src elisp
      (start/leader-keys
        "." '(counsel-find-file :wk "Find file")
        "s" '(save-buffer :wk "save buffer")
        "SPC" '(counsel-M-x :wk "Counsel M-x")
        "TAB" '(comment-line :wk "Comment lines")
        "p" '(projectile-command-map :wk "Projectile command map"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "f" '(:ignore t :wk "Find")
        "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config")
        "f r" '(counsel-recentf :wk "Recent files"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "b" '(:ignore t :wk "Buffer Bookmarks")
        "b b" '(counsel-switch-buffer :wk "Switch buffer")
        "b k" '(kill-this-buffer :wk "Kill this buffer")
        "b i" '(counsel-ibuffer :wk "Ibuffer")
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b j" '(bookmark-jump :wk "Bookmark jump")
        "b c" '(tab-bar-new-tab :Wk "New tab"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "w" '(:ignore t :wk "Windows")
        ;; Window splits
        "w c" '(evil-window-delete :wk "Close window")
        "w n" '(split-window-right :wk "New window")
        "w s" '(evil-window-split :wk "Horizontal split window")
        "w v" '(evil-window-vsplit :wk "Vertical split window")
        ;; Window motions
        "w h" '(evil-window-left :wk "Window left")
        "w j" '(evil-window-down :wk "Window down")
        "w k" '(evil-window-up :wk "Window up")
        "w l" '(evil-window-right :wk "Window right")
        "w w" '(evil-window-next :wk "Goto next window")
        ;; Move Windows
        "w H" '(buf-move-left :wk "Buffer move left")
        "w J" '(buf-move-down :wk "Buffer move down")
        "w K" '(buf-move-up :wk "Buffer move up")
        "w L" '(buf-move-right :wk "Buffer move right"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "d" '(:ignore t :wk "Dired")
        "d f" '(counsel-find-file :wk "Open dired")
        "d j" '(counsel-dired-jump :wk "Dired jump to current"))
#+end_src

#+begin_src elisp
      (start/leader-keys
        "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands
        "h r" '((lambda () (interactive)
                  (load-file "~/.emacs.d/init.el"))
                :wk "Reload emacs config"))

#+end_src

#+begin_src elisp
      (start/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t w" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
        "t f" '(treemacs :wk "Treemacs toggle")
        "t t" '(treemacs-select-window :wk "Treemacs toggle focus")
        "t v" '(vterm-toggle :wk "Vterm toggle")
        "t o" '(counsel-load-theme :wk "Select theme")
        "t h" '(treemacs-toggle-show-dotfiles :wk "Treemacs toggle hidden file")))
#+end_src

** Install themes
#+begin_src elisp
    (use-package ewal
      :init (setq ewal-use-built-in-always-p nil
                  ewal-use-built-in-on-failure-p t
                  ewal-built-in-palette "sexy-material"))

    (use-package ewal-doom-themes)
    (use-package ef-themes)
    (use-package catppuccin-theme)
#+end_src

** Remeber last theme
#+begin_src elisp    
    (use-package remember-last-theme
      :ensure t
      :config (remember-last-theme-enable)
    )
#+end_src

** Install Doom Modeline
#+begin_src elisp
    (use-package doom-modeline
      :init
      (setq doom-modeline-height 40)
      (setq doom-modeline-buffer-encoding nil)
      (doom-modeline-mode))
#+end_src 

** Tab-bar
#+begin_src elisp
    (use-package tab-bar
      :bind (:map tab-prefix-map ("p" . my/new-project-tab))
      :init
      (defun my/new-project-tab ()
        (interactive)
        (other-tab-prefix)
        (projectile-switch-project)
        (tab-rename (projectile-project-name))))
    (tab-bar-mode)
#+end_src

** Install & set-up which key 
#+begin_src elisp
    (use-package which-key
      :init
        (which-key-mode 1)
      :diminish
      :config
      (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order
          which-key-allow-imprecise-window-fit nil
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " → " 
          )
    )
#+end_src

** Install & set-up Treemacs
#+begin_src elisp
    (use-package treemacs
      :ensure t
      :defer t
      :bind
      (("C-c t" . treemacs))
      :config
      (setq treemacs-width 30)
      (setq treemacs-toggle-show-dotfiles nil)
      (setq-local mode-line-format nil))
#+end_src

** Install & set-up Highlight indented line
#+begin_src elisp
    (use-package highlight-indent-guides
      :ensure t
      :defer t
      :hook (prog-mode . highlight-indent-guides-mode)
      :config
      (setq highlight-indent-guides-method 'character)
      (setq highlight-indent-guides-character ?\|)
      (setq highlight-indent-guides-responsive 'top))
#+end_src

** Better Org mode support
#+begin_src elisp
    (use-package org
      :config
      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-ellipsis "..."
            org-hide-emphasis-markers t
            org-agenda-files (append
                              (file-expand-wildcards "~/notes/*.org")))
      :hook (org-mode . org-indent-mode))

    (use-package org-bullets
      :hook (org-mode . org-bullets-mode))

    (defun efs/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
    '(("d" "Dashboard"
        ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
        ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
        ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
                (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
                (org-agenda-files org-agenda-files)))
        (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
                (org-agenda-todo-list-sublevels nil)
                (org-agenda-files org-agenda-files)))
        (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
                (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
                (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
                (org-agenda-files org-agenda-files)))
        (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
                (org-agenda-files org-agenda-files)))))))

    (setq org-tag-alist
          '((:startgroup)
                                            ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?h)
            ("@work" . ?w)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
#+end_src

** Hide modeline on special cases
#+begin_src elisp
    (use-package hide-mode-line
      :ensure t
      :defer
      :hook (;; (eshell-mode . hide-mode-line-mode)
             (vterm-mode . hide-mode-line-mode)
             (occur-mode . hide-mode-line-mode)
             (treemacs-mode . hide-mode-line-mode)))

    (setq warning-suppress-log-types '(warning-suppress-types (unlock-file)))
#+end_src

** Install & setup Projectile
#+begin_src elisp
    (use-package projectile
      :config
      (projectile-mode 1)
      :init
      (setq projectile-switch-project-action #'projectile-dired))
#+end_src


** Install & Setup Vterm
#+begin_src elisp
    (use-package vterm
      :ensure t
      :defer
      :custom
      (vterm-max-scrollback 100000))

    (use-package vterm-toggle
      :ensure t
      :custom
      (vterm-toggle-scope 'project)
      (vterm-toggle-project-root t)
      (vterm-toggle-reset-window-configration-after-exit t)
      (vterm-toggle-hide-method 'reset-window-configration))
#+end_src

** Install & setup lsp-mode
#+begin_src elisp
    (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "C-c C-l")
      :hook (
              (before-save . lsp-format-buffer)
              (before-save . lsp-organize-imports)
              (prog-mode . lsp)
        )
      :commands lsp
      :hook ((c-mode . lsp)
             (c++-mode . lsp)
             (python-mode . lsp)
             )
      :config 
      (setq lsp-enable-snippet t
            lsp-inlay-hint-enable t
            lsp-enable-on-type-formatting t
            lsp-headerline-breadcrumb-enable nil))
#+end_src

** Rust-mode
#+begin_src elisp
    (use-package rust-mode)
    (autoload 'rust-mode "rust-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
    (setq rust-format-on-save t)
#+end_src

** Install & setup lsp-ui & flycheck
#+begin_src elisp
    (use-package lsp-ui
      :after lsp-mode
      :hook (lsp-mode . lsp-ui-mode)
      :init
      (add-hook 'flycheck-mode-hook 'lsp-ui-mode) ;; HACK
      (add-hook 'lsp-mode-hook 'lsp-ui-mode)
      :config
      (setq lsp-ui-doc-enable t
            lsp-ui-doc-delay 1
            lsp-ui-doc-show-with-cursor t 
            lsp-ui-doc--prev-frame nil
            lsp-ui-doc-show-with-mouse nil
            lsp-ui-doc-position 'at-point
            lsp-ui-doc-border nil
            flycheck-mode-hook 'lsp-ui-mode
            lsp-ui-flycheck-enable t))

    (use-package flycheck   
      :hook
      (prog-mode . flycheck-mode)
    )
#+end_src

** Bind key for toggle focus between lsp-ui-doc
#+begin_src elisp
    (evil-define-key 'normal 'lsp-ui-doc-frame-mode
          [?K] #'lsp-ui-doc-unfocus-frame)
    (evil-normalize-keymaps)

    (evil-define-key 'normal 'lsp-ui-doc-mode
          [?K] #'lsp-ui-doc-focus-frame)
    (global-set-key (kbd "C-s") 'save-buffer)
#+end_src

** Install yasnippet
#+begin_src elisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-global-mode))
#+end_src

** Add autocompletion using company
#+begin_src elisp
    (use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

** Transparency Effect
#+begin_src elisp
(set-frame-parameter nil 'alpha-background 96)
(add-to-list 'default-frame-alist '(alpha-background . 96))
#+end_src

** Custom function for moving buffer
#+begin_src elisp
    ;;;###autoload
    (defun buf-move-up ()
      "Swap the current buffer and the buffer above the split.
    If there is no split, ie now window above the current one, an
    error is signaled."
    ;;  "Switches between the current buffer, and the buffer above the
    ;;  split, if possible."
      (interactive)
      (let* ((other-win (windmove-find-other-window 'up))
         (buf-this-buf (window-buffer (selected-window))))
        (if (null other-win)
            (error "No window above this one")
          ;; swap top with this one
          (set-window-buffer (selected-window) (window-buffer other-win))
          ;; move this one to top
          (set-window-buffer other-win buf-this-buf)
          (select-window other-win))))

    ;;;###autoload
    (defun buf-move-down ()
    "Swap the current buffer and the buffer under the split.
    If there is no split, ie now window under the current one, an
    error is signaled."
      (interactive)
      (let* ((other-win (windmove-find-other-window 'down))
         (buf-this-buf (window-buffer (selected-window))))
        (if (or (null other-win) 
                (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
            (error "No window under this one")
          ;; swap top with this one
          (set-window-buffer (selected-window) (window-buffer other-win))
          ;; move this one to top
          (set-window-buffer other-win buf-this-buf)
          (select-window other-win))))

    ;;;###autoload
    (defun buf-move-left ()
    "Swap the current buffer and the buffer on the left of the split.
    If there is no split, ie now window on the left of the current
    one, an error is signaled."
      (interactive)
      (let* ((other-win (windmove-find-other-window 'left))
         (buf-this-buf (window-buffer (selected-window))))
        (if (null other-win)
            (error "No left split")
          ;; swap top with this one
          (set-window-buffer (selected-window) (window-buffer other-win))
          ;; move this one to top
          (set-window-buffer other-win buf-this-buf)
          (select-window other-win))))

    ;;;###autoload
    (defun buf-move-right ()
    "Swap the current buffer and the buffer on the right of the split.
    If there is no split, ie now window on the right of the current
    one, an error is signaled."
      (interactive)
      (let* ((other-win (windmove-find-other-window 'right))
         (buf-this-buf (window-buffer (selected-window))))
        (if (null other-win)
            (error "No right split")
          ;; swap top with this one
          (set-window-buffer (selected-window) (window-buffer other-win))
          ;; move this one to top
          (set-window-buffer other-win buf-this-buf)
          (select-window other-win))))
#+end_src
